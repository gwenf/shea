#!/usr/bin/env node

/* 
  to connect as a lite client to a running chain, we need: 
  - genesis.json
  - initial node address

  for now, these can be passed as cli arguments.
  soon tho, the entire app should just be a single ipfs hash.
  the ipfs hash will be used to download the genesis.json
  and as the rendezvous for discovering seed nodes to run
  as a lite client of.

  might require chrome to be installed and open the client in incognito
  to prevent browser extensions from doing nasty things.

  `shea` will connect as a lite client to the specified node, then when 
  a state query comes back with a string value in `state.clientCode`, serves
  that code as javascript and opens chrome pointing at that url.

  `shea` also runs a `/sign` endpoint which will sign any data posted to it.
  `shea` manages persisting this keypair. each keypair is used only for one app.

  lotion apps can require('shea') and pass it the genesis.
  this will also announce the running node as a full-node for discovery by users.
  should this be implemented as lotion middleware? probably not. better pattern is probably
  require('shea')(app), and `app` can have methods for accessing genesis, tendermint node info, etc

*/

let { argv } = require('yargs')
let axios = require('axios')
let getPort = require('get-port')
let express = require('express')
let proxy = require('express-http-proxy')
let { json } = require('body-parser')
let opn = require('opn')

let GCI = argv._[0]

let lotion = require('lotion')

async function main() {
  let expressPort = await getPort()
  let expressApp = express()

  let { getState, send } = await lotion.connect(GCI)

  let state = await getState()

  if (typeof state !== 'object' || !state._sheaClientCode) {
    return console.log('no shea client app found at address ' + GCI)
  }

  let clientCode = state._sheaClientCode
  expressApp.use(json())
  expressApp.get('/', (req, res) => {
    res.send(clientCode)
  })
  expressApp.get('/state', async (req, res) => {
    let state = await getState()
    res.json(state)
  })
  expressApp.post('/txs', async (req, res) => {
    let result = await send(req.body)
    res.json(result)
  })

  expressApp.listen(expressPort)
  console.log('http://localhost:' + expressPort)
  opn('http://localhost:' + expressPort)
}

main()
